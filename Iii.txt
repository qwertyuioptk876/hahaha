-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- 玩家物件與UI父級
local localPlayer = Players.LocalPlayer or Players.PlayerAdded:Wait()
local playerGui = localPlayer:WaitForChild("PlayerGui", 10)
if not playerGui then warn("PlayerGui 無法取得") return end

-- 參數設定
local PING_ESTIMATE = 0.125 -- 預設125ms網路延遲補償（可動態改）
local EXTRA_PREDICT_TIME = 0.03 -- 額外預測時間補償
local HISTORY_MAX = 6 -- 多幀記錄數
local BASE_FORWARD_OFFSET = 3 -- 固定往前推距離（不可更改）
local LONG_TELEPORT = false

-- 玩家列表
local allPlayers = {}
local selectedPlayer = nil
local currentIndex = 1

-- 預測歷史資料
local posHistory = {}
local velHistory = {}

-- UI圓角函數
local function makeRounded(uiElement, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 8)
    corner.Parent = uiElement
end

-- 建立GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TeleportUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

-- 傳送按鈕 (黃色)
local toggleButton = Instance.new("TextButton")
toggleButton.Text = "傳送"
toggleButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
toggleButton.Size = UDim2.new(0, 100, 0, 40)
toggleButton.Position = UDim2.new(0, 100, 0, 100)
toggleButton.TextScaled = true
toggleButton.Active = true
toggleButton.Draggable = true
makeRounded(toggleButton)
toggleButton.Parent = screenGui

-- 面板
local panelFrame = Instance.new("Frame")
panelFrame.Size = UDim2.new(0, 250, 0, 120)
panelFrame.Position = UDim2.new(0, 100, 0, 150)
panelFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
panelFrame.Visible = false
panelFrame.Active = true
panelFrame.Draggable = true
makeRounded(panelFrame)
panelFrame.Parent = screenGui

-- 左箭頭
local leftButton = Instance.new("TextButton")
leftButton.Text = "<"
leftButton.Size = UDim2.new(0, 30, 0, 40)
leftButton.Position = UDim2.new(0, 10, 0, 10)
leftButton.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
leftButton.TextScaled = true
makeRounded(leftButton)
leftButton.Parent = panelFrame

-- 玩家名稱標籤
local playerNameLabel = Instance.new("TextButton")
playerNameLabel.Text = "玩家名稱"
playerNameLabel.Size = UDim2.new(0, 170, 0, 40)
playerNameLabel.Position = UDim2.new(0, 40, 0, 10)
playerNameLabel.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
playerNameLabel.TextScaled = true
makeRounded(playerNameLabel)
playerNameLabel.Parent = panelFrame

-- 右箭頭
local rightButton = Instance.new("TextButton")
rightButton.Text = ">"
rightButton.Size = UDim2.new(0, 30, 0, 40)
rightButton.Position = UDim2.new(0, 215, 0, 10)
rightButton.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
rightButton.TextScaled = true
makeRounded(rightButton)
rightButton.Parent = panelFrame

-- 點（藍色）
local pointButton = Instance.new("TextButton")
pointButton.Text = "點"
pointButton.Size = UDim2.new(0.5, -5, 0, 40)
pointButton.Position = UDim2.new(0, 10, 0, 65)
pointButton.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
pointButton.TextScaled = true
makeRounded(pointButton)
pointButton.Parent = panelFrame

-- 長（紅色）
local longButton = Instance.new("TextButton")
longButton.Text = "長"
longButton.Size = UDim2.new(0.5, -5, 0, 40)
longButton.Position = UDim2.new(0.5, 5, 0, 65)
longButton.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
longButton.TextScaled = true
makeRounded(longButton)
longButton.Parent = panelFrame

-- 更新玩家列表
local function updatePlayerList()
    allPlayers = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer then
            table.insert(allPlayers, player)
        end
    end
    if #allPlayers > 0 then
        currentIndex = math.clamp(currentIndex, 1, #allPlayers)
        selectedPlayer = allPlayers[currentIndex]
        playerNameLabel.Text = selectedPlayer.Name
    else
        selectedPlayer = nil
        playerNameLabel.Text = "無其他玩家"
    end
end

-- 更新目標歷史位置與速度
local function updateHistory(hrp)
    table.insert(posHistory, 1, hrp.Position)
    if #posHistory > HISTORY_MAX then table.remove(posHistory) end

    if #posHistory >= 2 then
        local dt = 1/60
        local vel = (posHistory[1] - posHistory[2]) / dt
        table.insert(velHistory, 1, vel)
        if #velHistory > HISTORY_MAX - 1 then table.remove(velHistory) end
    end
end

local function averageVector(list)
    local sum = Vector3.new(0,0,0)
    for _, v in ipairs(list) do
        sum = sum + v
    end
    if #list == 0 then return Vector3.new(0,0,0) end
    return sum / #list
end

local function calcAcceleration()
    if #velHistory < 2 then return Vector3.new(0,0,0) end
    local sum = Vector3.new(0,0,0)
    for i=1, #velHistory-1 do
        sum = sum + (velHistory[i] - velHistory[i+1])
    end
    return sum / (#velHistory - 1)
end

local function getDirection(hrp, velocity)
    local lookVec = hrp.CFrame.LookVector
    local velDir = velocity.Magnitude > 1 and velocity.Unit or lookVec
    local mixedDir = (velDir * 0.7 + lookVec * 0.3).Unit
    return mixedDir
end

local function curvatureCorrection()
    if #velHistory < 3 then return Vector3.new(0,0,0) end
    local dir1 = velHistory[1].Unit
    local dir2 = velHistory[2].Unit
    local turnAngle = math.acos(math.clamp(dir1:Dot(dir2), -1,1))
    local cross = dir1:Cross(dir2).Y
    local sign = cross >= 0 and 1 or -1
    local curvatureStrength = math.min(turnAngle * 10, 2)
    local perpDir = Vector3.new(-dir1.Z, 0, dir1.X) * sign
    return perpDir * curvatureStrength
end

local function calculatePredictPosition(hrp)
    updateHistory(hrp)

    local velocity = averageVector(velHistory)
    local acceleration = calcAcceleration()
    local dir = getDirection(hrp, velocity)
    local curvature = curvatureCorrection()

    local predictTime = PING_ESTIMATE + EXTRA_PREDICT_TIME

    local predictedPos = hrp.Position
                      + velocity * predictTime
                      + 0.5 * acceleration * predictTime * predictTime
                      + curvature
                      + dir * BASE_FORWARD_OFFSET

    -- 高度平滑
    local yTarget = hrp.Position.Y
    local yPred = predictedPos.Y
    local ySmooth = math.clamp(yPred, yTarget - 2, yTarget + 3)
    predictedPos = Vector3.new(predictedPos.X, ySmooth, predictedPos.Z)

    return predictedPos
end

-- 持續瞬移
RunService.RenderStepped:Connect(function()
    if LONG_TELEPORT and selectedPlayer then
        local targetHRP = selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart")
        local myHRP = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
        if targetHRP and myHRP then
            local predictedPos = calculatePredictPosition(targetHRP)
            myHRP.Velocity = Vector3.zero
            myHRP.CFrame = CFrame.new(predictedPos, targetHRP.Position)
        end
    end
end)

-- UI功能綁定

toggleButton.MouseButton1Click:Connect(function()
    panelFrame.Visible = not panelFrame.Visible
    LONG_TELEPORT = false
    updatePlayerList()
end)

leftButton.MouseButton1Click:Connect(function()
    updatePlayerList()
    if #allPlayers > 0 then
        currentIndex = (currentIndex - 2) % #allPlayers + 1
        selectedPlayer = allPlayers[currentIndex]
        playerNameLabel.Text = selectedPlayer.Name
    end
    LONG_TELEPORT = false
end)

rightButton.MouseButton1Click:Connect(function()
    updatePlayerList()
    if #allPlayers > 0 then
        currentIndex = (currentIndex) % #allPlayers + 1
        selectedPlayer = allPlayers[currentIndex]
        playerNameLabel.Text = selectedPlayer.Name
    end
    LONG_TELEPORT = false
end)

playerNameLabel.MouseButton1Click:Connect(function()
    updatePlayerList()
    if selectedPlayer then
        local targetHRP = selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart")
        local myHRP = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
        if targetHRP and myHRP then
            myHRP.CFrame = CFrame.new(calculatePredictPosition(targetHRP))
        end
    end
    LONG_TELEPORT = false
end)

pointButton.MouseButton1Click:Connect(function()
    updatePlayerList()
    if selectedPlayer then
        local targetHRP = selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart")
        local myHRP = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
        if targetHRP and myHRP then
            myHRP.CFrame = CFrame.new(calculatePredictPosition(targetHRP))
        end
    end
    LONG_TELEPORT = false
end)

longButton.MouseButton1Click:Connect(function()
    updatePlayerList()
    if selectedPlayer then
        LONG_TELEPORT = true
    end
end)

-- 玩家變動更新
Players.PlayerAdded:Connect(function()
    task.wait(0.5)
    updatePlayerList()
end)

Players.PlayerRemoving:Connect(function()
    task.wait(0.5)
    updatePlayerList()
end)

localPlayer.CharacterAdded:Connect(function()
    task.wait(1)
    updatePlayerList()
    LONG_TELEPORT = false
end)

-- 初始化玩家列表
updatePlayerList()